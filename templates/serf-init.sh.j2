#!/bin/sh
# Auto-generated by Ansible, do not edit!
# This template comes from bbaugher's https://github.com/bbaugher/serf/blob/master/templates/default/serf_service.erb
### BEGIN INIT INFO
# Provides: serf
# Short-Description: Serf agent
# Default-Start: 3 4 5
# Default-Stop: 0 1 2 6
# Required-Start:
# Required-Stop:
# Should-Start:
# Should-Stop:
### END INIT INFO

# Serf version is in this templated file, so serf upgrades will trigger serf restart
NAME="Serf Agent v{{ serf_version}}"

SERF_BINARY={{ serf_exe }}
SERF_ROLE={{ serf_role }}
SERF_NODE={{ ansible_hostname }}
SERF_RPC_ADDRESS=127.0.0.1:{{ serf_rpc_port }}
SERF_BIND_ADDRESS=0.0.0.0:{{ serf_bind_port }}
SERF_LOG_LEVEL={{ serf_log_level }}
SERF_AGENT_LOG=/var/log/serf-agent.log
SERF_EVENT_HANDLERS=""

{#
{% set hostlist = [] %}
{% for gname in groups %}
{%   for host in groups[gname] %}
{%     if hostlist.append(hostvars[host]['ansible_default_ipv4']['address']) %}{% endif %}
{%   endfor %}
{% endfor %}
SERF_JOIN_ADDRESSES="{{ hostlist|join(',') }}"
#}
SERF_JOIN_ADDRESSES=""

SLEEP_TIME=5
CURRENT_WAIT=0
TIMEOUT=30

start() {
	findPid
	
	if [ "" = "$FOUND_PID" ]; then
      nohup $SERF_BINARY agent -role "$SERF_ROLE" -node $SERF_NODE -bind $SERF_BIND_ADDRESS -rpc-addr $SERF_RPC_ADDRESS -log-level $SERF_LOG_LEVEL $SERF_EVENT_HANDLERS &>> $SERF_AGENT_LOG &
      
      if [[ $? -ne 0 ]]; then
        echo "Error starting $NAME"
        exit 1
      fi
      
      echo "$NAME successfully started"
      
      if [[ ! -z $SERF_JOIN_ADDRESSES ]]; then
	    $SERF_BINARY join -rpc-addr $SERF_RPC_ADDRESS $SERF_JOIN_ADDRESSES
	      
	    if [[ $? -ne 0 ]]; then
	      echo "Error joing $NAME to cluster"
	      exit 1
	    fi
	      
	    echo "$NAME successfully joined existing cluster(s)"
      fi
      
    else
      echo "$NAME is already running"
    fi
}

stop() {
	findPid
	if [ -z "$FOUND_PID" ]; then
      echo "$NAME is not running, nothing to stop"
    else
    
      while [[ -n $FOUND_PID ]]; 
  	  do
        echo "Attempting to shutdown $NAME..."
        kill -INT $FOUND_PID
      
        if [[ $? -ne 0 ]]; then
	      echo "Error stopping $NAME"
	      exit 1
	    fi
	    
	    sleep $SLEEP_TIME
        CURRENT_WAIT=$(($CURRENT_WAIT+$SLEEP_TIME))
        if [[ $CURRENT_WAIT -gt $TIMEOUT ]]; then
          echo "Timed out waiting for $NAME to stop"
          exit 1
        fi
        findPid
      done
      
      echo "Stopped $NAME"
      
    fi
}

status() {
  findPid
  if [ -z "$FOUND_PID" ]; then
    echo "$NAME is not running" ; exit 1
  else
    echo "$NAME is running : $FOUND_PID" 
  fi
}

findPid() {
	FOUND_PID=`pgrep -f {{ serf_exe }}`
}

case "$1" in
  start)
    start
  ;;
  stop)
    stop
  ;;
  restart)
    stop
    start
  ;;
  status)
    status
  ;;
  *)
    echo "Usage: $0 {start|stop|restart|status}"
    exit 1
esac

exit 0
